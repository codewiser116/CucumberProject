package jdbc;

import org.junit.Assert;
import org.junit.Test;
import utilities.OracleDBConnection;

import java.sql.*;

public class JDBCExamples {
    public static void main(String[] args) {
//        String createTableQuery = " CREATE TABLE customers20 (" +
//                "customer_id NUMBER Generated by default on NULL as IDENTITY PRIMARY KEY, " +
//                "customer_name VARCHAR(30)," +
//                "salary NUMBER," +
//                "country VARCHAR(30)," +
//                "email VARCHAR(30)," +
//                "phone_number VARCHAR(15))";
//        createTableStatement(createTableQuery);

//        String selectQuery = "select * from customers";
//        selectTableStatement(selectQuery);

//        selectTablePreparedStatement(70000, "r");

//        insertPreparedStatement("Mike","United States",60000, "mike@gmail.com","1234567");

//        updatePreparedStatement("United States", 100000);


//        String query = "select * from customers";
//        try {
//            Statement statement = OracleDBConnection.getConnection().createStatement();
//            ResultSet resultSet = statement.executeQuery(query);
//            while(resultSet.next()){
//                System.out.println(resultSet.getString(1) + " " + resultSet.getString(2));
//            }
//        }
//        catch (SQLException e) {
//            System.out.println("Failed to create statement");
//        }

        deletePreparedStatement(5000);
    }

    public static void createTableStatement(String query){
        Connection connection = OracleDBConnection.getConnection();
        try {
            Statement statement = connection.createStatement();
            statement.execute(query);
            System.out.println("Table was created");
        }
        catch (SQLException | NullPointerException e) {
            System.out.println("Failed to create a Statement!");
        }
    }

    public static void selectTableStatement(String query){
        Connection connection = OracleDBConnection.getConnection();
        try{
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);
            while(resultSet.next()){
                System.out.print(resultSet.getInt(1) + " " );
                System.out.print(resultSet.getString(2) + " ");
                System.out.print(resultSet.getString(3) + " ");
                System.out.print(resultSet.getString(4) + " ");
                System.out.print(resultSet.getString(5) + " ");
                System.out.print(resultSet.getString(6) + " ");
                System.out.println();
            }
        }
        catch(SQLException e){
            System.out.println("Failed to create a Statement!");
        }
    }

    public static void selectTablePreparedStatement(int salary, String countryCharacter){
        Connection connection = OracleDBConnection.getConnection();
        String query = "SELECT * FROM customers where salary > ? and country like ?";

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, salary);
            preparedStatement.setString(2, "%"+countryCharacter+"%");

            ResultSet resultSet = preparedStatement.executeQuery();
            while(resultSet.next()){
                System.out.println(resultSet.getInt(1));
                System.out.println(resultSet.getString(2));
            }
        }
        catch (SQLException e) {
            System.out.println("Failed to create a Prepared Statement");
            e.printStackTrace();
        }
    }

    public static void insertPreparedStatement(String name, String country, int salary, String email,
                                               String phoneNumber){
        String sql = "INSERT INTO customers(customer_name, salary, email, phone_number, country) " +
                "VALUES(?,?,?,?,?)";
        Connection connection = OracleDBConnection.getConnection();
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, name);
            preparedStatement.setInt(2, salary);
            preparedStatement.setString(3, email);
            preparedStatement.setString(4, phoneNumber);
            preparedStatement.setString(5, country);

            preparedStatement.executeUpdate();
        }
        catch (SQLException e) {
            System.out.println("Failed to create a Prepared Statement!");
        }

    }

    public static void updatePreparedStatement(String country, int newSalary){
        Connection connection = OracleDBConnection.getConnection();
        String query = "UPDATE customers SET salary = ? where country = ?";

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, newSalary);
            preparedStatement.setString(2, country);

            int rowsUpdated = preparedStatement.executeUpdate();
            System.out.println("Rows updated: "+ rowsUpdated);
        }
        catch (SQLException e) {
            System.out.println("Failed to create a Prepared Statement!");
        }
    }

    public static void verifySalaryUpdate(int newSalary, String country){
        String query = "SELECT salary from customers where country = ?";
        Connection connection = OracleDBConnection.getConnection();

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1,country);
            ResultSet resultSet = preparedStatement.executeQuery();

            // Assertion part
            while(resultSet.next()){
                int actualSalary = resultSet.getInt("salary");
                Assert.assertEquals(newSalary, actualSalary);
            }
        }
        catch (SQLException e) {
            System.out.println("Failed to create a Prepared Statement!");
        }
    }

    public static void deletePreparedStatement(int salary){
        Connection connection = OracleDBConnection.getConnection();
        String query = "DELETE from employees where salary < ?";


        try {
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, salary);
            preparedStatement.executeUpdate();
        }
        catch (SQLException e) {
            System.out.println("Failed to create Prepared Statement!");
            e.printStackTrace();
        }
    }

}
